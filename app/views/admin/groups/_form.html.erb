<%= simple_form_for [:admin, @group] do |f| %>
  <%= f.error_notification %>
  <%= f.input :name %>
  <%= f.input :introduction %>
  <%= f.input :description %>
  <div class="form-group">
    <label for="leader-name"><%= Group.human_attribute_name :leader %></label>
    <div id="leader"></div>
    <input id="leader-name" type="text" class="form-control" value="<%= f.object.leader&.profile&.name %>">
    <div id="leader-labels" class="mt-2"></div>
  </div>
  <input id="leader-id" name="leader[id]" type="hidden" value="<%= f.object.leader&.id %>">
  <%= f.input :sequence %>
  <%= button_tag class: 'btn btn-primary', data: { disable_with: '送出中...' } do %>
    <i class="fas fa-save"></i> 儲存
  <% end %>
<% end %>
<script type="text/javascript">
  document.addEventListener('turbolinks:load', () => {
    const leader = document.getElementById('leader')
    const leaderId = document.getElementById('leader-id')
    const leaderName = document.getElementById('leader-name')
    const originalLeader = { id: leaderId.value, name: leaderName.value }
    let inputLock = false
  
    async function getUsers(name) {
      const url = '<%= admin_members_url(format: :json) %>'
      const params = window.$.param({ q: { profile_name_cont: name } })
      const resPromise = await fetch(`${url}?${params}`, { credentials: 'same-origin' })
      const res = await resPromise.json()
      return res
    }
  
    function removeChildren(dom) {
      dom.children.forEach(child => child.remove())
    }
  
    function resetLeader() {
      leaderName.classList.remove('d-none')
      leaderId.value = originalLeader.id
      removeChildren(leader)
    }
  
    function leaderBtn(name) {
      const button = document.createElement('button')
      button.setAttribute('type', 'button')
      button.classList.add('btn', 'btn-sm', 'btn-primary', 'm-1', 'leader')
      const icon = document.createElement('i')
      icon.classList.add('fas', 'fa-times', 'ml-2')
      button.append(name, icon)
      button.addEventListener('click', () => {
        resetLeader()
      })
      return button
    }
  
    function setLeader(id, name) {
      leaderId.value = id
      leaderName.classList.add('d-none')
      removeChildren(leader)
      leader.append(leaderBtn(name))
    }
  
    function candidateLeaderBtn(id, name, email) {
      const button = document.createElement('button')
      button.setAttribute('type', 'button')
      button.classList.add('btn', 'btn-sm', 'btn-outline-secondary', 'm-1', 'leader')
      button.setAttribute('data-user-id', id)
      button.setAttribute('title', `email is ${email}`)
      button.append(name)
      button.addEventListener('click', () => {
        setLeader(id, name)
      })
      return button
    }
  
    function addCandidateLeaderBtns() {
      const input = leaderName.value
      const labels = document.getElementById('leader-labels')
      getUsers(input).then(res => {
        removeChildren(labels)
        res.users.forEach(user => {
          labels.append(candidateLeaderBtn(user.id, user.name, user.email))
        })
      })
    }
    if (originalLeader.id) setLeader(originalLeader.id, originalLeader.name)
  
    leaderName.addEventListener('compositionstart', () => {
      inputLock = true
    })
    leaderName.addEventListener('input', () => {
      if (inputLock) return
      addCandidateLeaderBtns()
    })
    leaderName.addEventListener('compositionend', () => {
      inputLock = false
      addCandidateLeaderBtns()
    })
  })
</script>
