<div id="app">
  <%= simple_form_for [:admin, @team] do |f| %>
    <%= f.error_notification %>
    <% f.object.errors.to_a.each do |error| %>
      <%= f.error_notification message: error %>
    <% end %>
    <%= f.input :name %>
    <div class="form-group">
      <label><%= Service::Team.human_attribute_name :leader %></label>
      <button v-on:click="editLeader" v-show="!leader.editMode" type="button" class="btn btn-sm btn-primary ml-2">
        {{ leader.name }}<i class="ml-1 fas fa-times"></i>
      </button>
      <input v-model="leader.name" v-show="leader.editMode" v-on:compositionstart="typing = true" v-on:compositionend="typing = false" v-on:input="searchLeader" type="text" class="form-control">
      <div class="mt-2">
        <button v-for="candidate in leader.candidates" v-bind:title="candidate.email" v-show="leader.editMode" v-on:click="setLeader(candidate.id, candidate.name)" type="button" class="btn btn-sm btn-outline-secondary m-1">
          {{ candidate.name }}
        </button>
      </div>
      <input v-bind:value="leader.id" name="service_team[user_id]" type="hidden">
    </div>
    <%= f.error :leader %>
    <div class="form-group">
      <label><%= Service::TeamUser.model_name.human %></label>
      <button v-on:click="newTeamUser" type="button" class="btn btn-sm btn-outline-success">
        <i class="mr-1 fas fa-plus"></i> 新增
      </button>
    </div>
    <div v-for="(teamUser, index) in teamUsers" class="ml-4 mt-2">
      <div v-show="!teamUser.deleted" class="form-inline">
        <div class="form-group mr-2">
          <label><%= Profile.human_attribute_name :name %></label>
          <input v-model="teamUser.name" v-show="teamUser.editMode" v-on:compositionstart="typing = true" v-on:compositionend="typing = false" v-on:input="searchTeamUser(index, teamUser.name)" type="text" class="form-control ml-1">
          <button v-on:click="editTeamUser(index)" v-show="!teamUser.editMode" type="button" class="btn btn-sm btn-primary ml-2">
            {{ teamUser.name }}<i class="ml-1 fas fa-times"></i>
          </button>
        </div>
        <div class="form-group mr-2">
          <label><%= Service::Role.model_name.human %></label>
          <select v-model="teamUser.roleId" v-bind:name="'service_team[team_users_attributes][' + index + '][role_id]'" class="form-control ml-1">
            <option value></option>
            <% @roles.each do |role| %>
              <option value="<%= role.id %>"><%= role.name %></option>
            <% end %>
          </select>
        </div>
        <div class="form-group">
          <button v-on:click="deleteTeamUser(index)" type="button" class="btn btn-sm btn-outline-danger">
            <i class="mr-1 fas fa-trash"></i> 刪除
          </button>
        </div>
        <div v-show="teamUser.editMode" class="w-100 mt-2">
          <button v-for="candidate in teamUser.candidates" v-bind:title="candidate.email" v-on:click="setTeamUser(index, candidate.id, candidate.name)" type="button" class="btn btn-sm btn-outline-secondary m-1">
            {{ candidate.name }}
          </button>
        </div>
        <input v-bind:value="teamUser.id" v-bind:name="'service_team[team_users_attributes][' + index + '][id]'" type="hidden">
        <input v-bind:value="teamUser.userId" v-bind:name="'service_team[team_users_attributes][' + index + '][user_id]'" type="hidden">
        <input v-bind:value="teamUser.deleted" v-bind:name="'service_team[team_users_attributes][' + index + '][_destroy]'" type="hidden">
      </div>
      <div v-show="teamUser.deleted">
        <button v-on:click="recoverTeamUser(index)" type="button" class="btn btn-sm btn-outline-primary">
          <i class="mr-1 fas fa-undo"></i> 復原
        </button>
      </div>
    </div>
    <hr>
    <%= button_tag class: 'btn btn-primary', data: { disable_with: '送出中...' } do %>
      <i class="fas fa-save"></i> 儲存
    <% end %>
  <% end %>
</div>
<script type="text/javascript">
  async function getUsers(name) {
    const url = '<%= admin_members_url(format: :json) %>'
    const params = window.$.param({ q: { profile_name_cont: name }})
    const resPromise = await fetch(`${url}?${params}`, { credentials: 'same-origin' })
    const res = await resPromise.json()
    return res
  }
  document.addEventListener('turbolinks:load', () => {
    // eslint-disable-next-line no-unused-vars
    const app = new window.Vue({
      el: '#app',
      data: {
        leader: {
          id: <%= @team.leader&.id || 'null' %>,
          name: '<%= @team.leader&.profile&.name %>',
          candidates: [],
          editMode: false
        },
        teamUsers: <%== @team.team_users.map { |u| { id: u.id, userId: u.user_id, name: u.user&.profile&.name, roleId: u.role_id }}.to_json %>,
        typing: false
      },
      mounted: function mounted() {
        if (!this.leader.id) this.leader.editMode = true
  
        this.teamUsers.forEach(user => this.$set(user, 'editMode', !user.id))
      },
      methods: {
        searchLeader() {
          if (this.typing) return
  
          getUsers(this.leader.name).then(res => this.$set(this.leader, 'candidates', res.users))
        },
        editLeader() {
          this.leader.editMode = true
          this.leader.id = null
        },
        setLeader(id, name) {
          this.leader.editMode = false
          this.leader.id = id
          this.leader.name = name
        },
        newTeamUser() {
          const user = {
            id: null,
            userId: null,
            roleId: null,
            name: null,
            role: null,
            candidates: [],
            deleted: false,
            editMode: true
          }
          this.teamUsers.push(user)
        },
        searchTeamUser(index, name) {
          if (this.typing) return
  
          getUsers(name).then(res => this.$set(this.teamUsers[index], 'candidates', res.users))
        },
        setTeamUser(index, userId, name) {
          this.teamUsers[index].editMode = false
          this.teamUsers[index].userId = userId
          this.teamUsers[index].name = name
        },
        editTeamUser(index) {
          this.teamUsers[index].editMode = true
        },
        deleteTeamUser(index) {
          this.$set(this.teamUsers[index], 'deleted', true)
        },
        recoverTeamUser(index) {
          this.teamUsers[index].deleted = false
        }
      }
    })
  })
</script>
